{"version":3,"sources":["store/store.js","components/preview/index.js","store/actions.js","components/form/index.js","components/backgroundSetter/index.js","App.js","index.js"],"names":["initialState","header","text","color","paragraph","button","buttonColor","backgroundImage","backgroundColor","position","store","createContext","Provider","AppProvider","children","useReducer","state","type","payload","dispatch","value","ComponentToPrint","React","forwardRef","props","ref","href","url","target","rel","className","style","background","backgroundPosition","Preview","globalState","useContext","componentRef","useRef","angle","color1","palette","color2","color3","length","saveAnything","x","y","inputHTML","document","createElement","body","appendChild","setAttribute","getElementById","select","execCommand","removeChild","alert","onClick","html","ReactDOMServer","renderToString","JSON","stringify","SaveJSON","exportComponentAsPNG","updateColorAC","Form","useState","setValue","handleChange","e","variable","name","useEffect","htmlFor","onChange","rows","rgbToRgba","rgb","a","replace","WrappedSketchPicker","onSelect","rest","opacity","c","r","g","b","initialPallet","offset","BackgroundSetter","setBackground","imagePositionY","setImagePositionY","open","setOpen","setAngle","setPalette","colorValue","setColorValue","accept","preventDefault","file","files","reader","FileReader","onloadend","result","readAsDataURL","placeholder","min","max","showAnglePicker","width","maxStops","paletteHeight","onPaletteChange","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.98a4f8fb.chunk.js","sourcesContent":["// store.js\r\nimport React, { createContext, useReducer } from 'react';\r\n\r\nconst initialState = {\r\n  header: {\r\n    text: '',\r\n    color: '#000000',\r\n  },\r\n  paragraph: { text: '', color: '#000000' },\r\n  button: {\r\n    text: '',\r\n    color: '#000000',\r\n    buttonColor: '#000000',\r\n  },\r\n  backgroundImage: '',\r\n  backgroundColor: '',\r\n  position: '100%',\r\n};\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer((state, { type, payload }) => {\r\n    switch (type) {\r\n      case 'UPDATE_TEXT':\r\n        return { ...state, ...payload };\r\n      case 'UPDATE_COLOR':\r\n        return { ...state, backgroundColor: payload };\r\n      case 'UPDATE_IMAGE':\r\n        return { ...state, backgroundImage: payload };\r\n      case 'UPDATE_IMAGE_POSITION':\r\n        return { ...state, position: payload };\r\n      default:\r\n        return state;\r\n    }\r\n  }, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, AppProvider };\r\n","import React, { useContext, useRef } from 'react';\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport { exportComponentAsPNG } from 'react-component-export-image';\r\nimport { store } from '../../store/store';\r\n\r\n// создаем ref на компонент для библиотеки, экспортирующей компонент как PNG\r\nconst ComponentToPrint = React.forwardRef((props, ref) => {\r\n  return (\r\n    <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <div className=\"preview-component\" ref={ref}>\r\n        <div className=\"main-preview\" style={{ background: props.color }}>\r\n          <div\r\n            className=\"main-preview-image\"\r\n            style={{\r\n              backgroundImage: `url(${props.backgroundImage})`,\r\n              backgroundPosition: '50%' + props.position + '%',\r\n            }}>\r\n            <div className=\"main-preview-content\">\r\n              <div className=\"main-preview-header\">\r\n                <h2 style={{ color: props.header.color }}>{props.header.text}</h2>\r\n              </div>\r\n              <div className=\"main-preview-parag\" style={{ color: props.paragraph.color }}>\r\n                {props.paragraph.text}\r\n              </div>\r\n\r\n              <div className=\"main-preview-button\">\r\n                {props.button.text ? (\r\n                  <button\r\n                    style={{\r\n                      backgroundColor: props.button.buttonColor,\r\n                      color: props.button.color,\r\n                    }}>\r\n                    {props.button.text}\r\n                  </button>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </a>\r\n  );\r\n});\r\n\r\nconst Preview = () => {\r\n  const globalState = useContext(store);\r\n  const componentRef = useRef();\r\n\r\n  const {\r\n    header,\r\n    paragraph,\r\n    button,\r\n    backgroundImage,\r\n    backgroundColor,\r\n    position,\r\n  } = globalState.state;\r\n  let color = '';\r\n  //проверяем бекграунд на градиент или цвет\r\n  if (backgroundColor) {\r\n    if (typeof backgroundColor === 'string') {\r\n      color = backgroundColor;\r\n    }\r\n    if (typeof backgroundColor === 'object') {\r\n      const { angle } = backgroundColor;\r\n      const color1 = backgroundColor.palette[0].color;\r\n      const color2 = backgroundColor.palette[1].color;\r\n      let color3 = '';\r\n      //если градиент с 2-мя параметрами\r\n      if (backgroundColor.palette.length === 2) {\r\n        color = `linear-gradient(${angle}deg,${color1},${color2}`;\r\n      }\r\n      //если градиент с 3-мя параметрами\r\n      if (backgroundColor.palette.length > 2) {\r\n        color3 = backgroundColor.palette[2].color;\r\n        color = `linear-gradient(${angle}deg,${color1},${color2},${color3})`;\r\n      }\r\n    }\r\n  }\r\n\r\n  //Вынесем дубликат кода в отдельную функцию\r\n  const saveAnything = (x, y) => {\r\n    const inputHTML = document.createElement('input');\r\n    document.body.appendChild(inputHTML);\r\n    inputHTML.setAttribute('id', 'inputHTML_id');\r\n    document.getElementById('inputHTML_id').value = x;\r\n    inputHTML.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(inputHTML);\r\n    alert(`${y} скопирован в буфер обмена`);\r\n  };\r\n\r\n  //функция для сохранения разметки в буфер обмена(костыль,надо найти решение получше)\r\n  const saveHtml = () => {\r\n    const html = ReactDOMServer.renderToString(\r\n      <ComponentToPrint\r\n        ref={componentRef}\r\n        header={header}\r\n        color={color}\r\n        paragraph={paragraph}\r\n        button={button}\r\n        backgroundImage={backgroundImage.background}\r\n        position={position}\r\n        url={backgroundImage.url}\r\n      />,\r\n    );\r\n    saveAnything(html, 'HTML');\r\n  };\r\n\r\n  const SaveJSON = () => {\r\n    const html = JSON.stringify(globalState);\r\n    saveAnything(html, 'JSON');\r\n  };\r\n  return (\r\n    <>\r\n      <ComponentToPrint\r\n        ref={componentRef}\r\n        header={header}\r\n        position={position}\r\n        color={color}\r\n        paragraph={paragraph}\r\n        button={button}\r\n        backgroundImage={backgroundImage.background}\r\n        url={backgroundImage.url}\r\n      />\r\n      <div className=\"saveas-wrapper\">\r\n        <div className=\"saveas-main\">\r\n          <h2>Сохранить как...</h2>\r\n          <div className=\"saveas-main-element\">\r\n            <button className=\"custom-button\" onClick={saveHtml}>\r\n              Скопировать HTML в буфер обмена\r\n            </button>\r\n          </div>\r\n          <div className=\"saveas-main-element\">\r\n            {/* сохраняем конфиг из стейта в JSON */}\r\n\r\n            <button className=\"custom-button\" onClick={() => SaveJSON()}>\r\n              Скопировать JSON в буфер обмена\r\n            </button>\r\n          </div>\r\n          <div className=\"saveas-main-element\">\r\n            <button className=\"custom-button\" onClick={() => exportComponentAsPNG(componentRef)}>\r\n              Экспортировать в PNG\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","export const updateTextAC = (payload) => {\r\n  return {\r\n    type: 'UPDATE_TEXT',\r\n    payload,\r\n  };\r\n};\r\nexport const updateColorAC = (payload) => {\r\n  return {\r\n    type: 'UPDATE_COLOR',\r\n    payload,\r\n  };\r\n};\r\nexport const updateImageAC = (payload) => {\r\n  return {\r\n    type: 'UPDATE_IMAGE',\r\n    payload,\r\n  };\r\n};\r\nexport const updateImagePositionAC = (payload) => {\r\n  return {\r\n    type: 'UPDATE_IMAGE_POSITION',\r\n    payload,\r\n  };\r\n};\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { store } from '../../store/store';\r\nimport { updateTextAC } from '../../store/actions';\r\nconst Form = () => {\r\n  const globalState = useContext(store);\r\n  const { dispatch } = globalState;\r\n\r\n  const [value, setValue] = React.useState({\r\n    header: {\r\n      text: '',\r\n      color: '#000000',\r\n    },\r\n    paragraph: { text: '', color: '#000000' },\r\n    button: {\r\n      text: '',\r\n      color: '#000000',\r\n      buttonColor: '#000000',\r\n    },\r\n  });\r\n\r\n  //Все изменения инпутов обрабатываются этой функцией. variable = это свойство изменямого стейта\r\n  const handleChange = (e, variable) => {\r\n    setValue({\r\n      ...value,\r\n      [e.target.name]: { ...value[e.target.name], [variable]: e.target.value },\r\n    });\r\n  };\r\n  //при каждом изменении стейта, диспатчим их в глобальный стор\r\n  useEffect(() => {\r\n    dispatch(updateTextAC(value));\r\n  }, [value, dispatch]);\r\n\r\n  const { header, paragraph, button } = value;\r\n  return (\r\n    <div className=\"form-wrapper\">\r\n      <form>\r\n        <div className=\"form-main\">\r\n          <div className=\"form-main-header\">\r\n            <span>Заголовок</span>\r\n            <label htmlFor=\"header\">цвет </label>\r\n            {/* интегрируем стандартый HTML color пикер */}\r\n            <input\r\n              name=\"header\"\r\n              type=\"color\"\r\n              value={header.color}\r\n              onChange={(e) => handleChange(e, 'color')}\r\n            />\r\n          </div>\r\n          <div className=\"form-main-text\">\r\n            <textarea\r\n              name=\"header\"\r\n              value={header.text}\r\n              onChange={(e) => handleChange(e, 'text')}\r\n              rows=\"4\"\r\n            />\r\n          </div>\r\n          <div className=\"form-main-header\">\r\n            <span>Параграф</span>\r\n            <label htmlFor=\"paragraph\">цвет </label>\r\n            <input\r\n              name=\"paragraph\"\r\n              type=\"color\"\r\n              value={paragraph.color}\r\n              onChange={(e) => handleChange(e, 'color')}\r\n            />\r\n          </div>\r\n          <div className=\"form-main-text\">\r\n            <textarea\r\n              name=\"paragraph\"\r\n              value={paragraph.text}\r\n              onChange={(e) => handleChange(e, 'text')}\r\n              rows=\"4\"\r\n            />\r\n          </div>\r\n          <div className=\"form-main-header\">\r\n            <span>Кнопка</span>\r\n            <label htmlFor=\"button\">цвет </label>\r\n            <input\r\n              name=\"button\"\r\n              type=\"color\"\r\n              value={button.color}\r\n              onChange={(e) => handleChange(e, 'color')}\r\n            />\r\n            <label htmlFor=\"buttonColor\">цвет кнопки</label>\r\n            <input\r\n              name=\"button\"\r\n              type=\"color\"\r\n              value={button.buttonColor}\r\n              onChange={(e) => handleChange(e, 'buttonColor')}\r\n            />\r\n          </div>\r\n          <div className=\"form-main-text\">\r\n            <textarea name=\"button\" value={button.text} onChange={(e) => handleChange(e, 'text')} />\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { store } from '../../store/store';\r\nimport { updateColorAC, updateImageAC, updateImagePositionAC } from '../../store/actions';\r\nimport { SketchPicker } from 'react-color';\r\nimport { GradientPickerPopover } from 'react-linear-gradient-picker';\r\nimport 'react-color-gradient-picker/dist/index.css';\r\n\r\n//необходимые операции для библиотеки градиента\r\nconst rgbToRgba = (rgb, a = 1) => rgb.replace('rgb(', 'rgba(').replace(')', `, ${a})`);\r\n\r\nconst WrappedSketchPicker = ({ onSelect, ...rest }) => {\r\n  return (\r\n    <SketchPicker\r\n      {...rest}\r\n      color={rgbToRgba(rest.color, rest.opacity)}\r\n      onChange={(c) => {\r\n        const { r, g, b, a } = c.rgb;\r\n        onSelect(`rgb(${r}, ${g}, ${b})`, a);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst initialPallet = [\r\n  { offset: '0.00', color: 'rgb(238, 241, 11)' },\r\n  { offset: '1.00', color: 'rgb(126, 32, 207)' },\r\n];\r\n\r\nconst BackgroundSetter = () => {\r\n  const globalState = useContext(store);\r\n  const { dispatch } = globalState;\r\n\r\n  const [background, setBackground] = useState('');\r\n\r\n  const [imagePositionY, setImagePositionY] = useState(100);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [angle, setAngle] = useState(90);\r\n  const [palette, setPalette] = useState(initialPallet);\r\n\r\n  const [colorValue, setColorValue] = React.useState('#ffcfef');\r\n\r\n  const setColor = (e) => {\r\n    setColorValue(e.target.value);\r\n  };\r\n\r\n  //градиент и цвет обновляем в глобальном стейте только после подтверждения, так как операция затратна\r\n  const sumbitGrad = () => {\r\n    dispatch(updateColorAC({ palette, angle }));\r\n  };\r\n\r\n  const sumbitColor = () => {\r\n    dispatch(updateColorAC(colorValue));\r\n  };\r\n  //при каждом измении стейта картинки диспатчим ее в стейт\r\n  useEffect(() => {\r\n    dispatch(updateImageAC(background));\r\n  }, [background, dispatch]);\r\n\r\n  // диспатчим параметры слайдера\r\n  useEffect(() => {\r\n    dispatch(updateImagePositionAC(imagePositionY));\r\n  }, [imagePositionY, dispatch]);\r\n\r\n  //загружаем картинку в стейт из ссылки\r\n  const handleInput = (e) => {\r\n    setBackground({ background: e.target.value, url: e.target.value });\r\n  };\r\n\r\n  //загружаем картинку в стейт из файла\r\n  const handleUpload = (e) => {\r\n    e.preventDefault();\r\n    let file = e.target.files[0];\r\n    let reader = new FileReader();\r\n    if (e.target.files.length === 0) {\r\n      return;\r\n    }\r\n    reader.onloadend = (e) => {\r\n      setBackground({\r\n        background: [reader.result],\r\n        //заглушка для картинки из файла\r\n        url: 'https://www.google.com/',\r\n      });\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n  // остслеживаем изменения слайдера и сохраняем в сосотояние компонента\r\n  const handleSliderY = (e) => {\r\n    setImagePositionY(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"prep-wrapper\">\r\n      <div className=\"myHeader\">\r\n        <h1>Конструктор баннера</h1>\r\n      </div>\r\n      <div className=\"prep\">\r\n        <input\r\n          className=\"prep-element\"\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          name=\"file\"\r\n          onChange={handleUpload}\r\n        />\r\n        <input\r\n          className=\"prep-element\"\r\n          type=\"text\"\r\n          name=\"url\"\r\n          onChange={handleInput}\r\n          placeholder=\"ссылка на картинку\"\r\n        />\r\n        <div className=\"setImagePosition\">\r\n          <p>Задать позицию изображения по высоте</p>\r\n          <input\r\n            value={imagePositionY}\r\n            type=\"range\"\r\n            name=\"posY\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            onChange={handleSliderY}></input>\r\n          <label htmlFor=\"volume\">Позиция по Y</label>\r\n        </div>\r\n        <div className=\"color-input\">\r\n          <label htmlFor=\"color\">Выберите цвет </label>\r\n          {/* интегрируем стандартый HTML color пикер */}\r\n          <input name=\"color\" type=\"color\" value={colorValue} onChange={setColor} />\r\n        </div>\r\n        <button className=\"custom-button\" onClick={sumbitColor}>\r\n          подтвердить\r\n        </button>\r\n        <div className=\"gradient-wrapper color-input\">\r\n          <label htmlFor=\"gradient\">Выберите градиент </label>\r\n          {/* итегрируем градиент пикер */}\r\n          <GradientPickerPopover\r\n            {...{\r\n              open,\r\n              setOpen,\r\n              angle,\r\n              setAngle,\r\n              showAnglePicker: true,\r\n              width: 220,\r\n              maxStops: 3,\r\n              paletteHeight: 32,\r\n              palette,\r\n              onPaletteChange: setPalette,\r\n            }}>\r\n            <WrappedSketchPicker />\r\n          </GradientPickerPopover>\r\n        </div>\r\n\r\n        <button className=\"custom-button\" onClick={sumbitGrad}>\r\n          подтвердить\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BackgroundSetter;\r\n","import './App.scss';\nimport React from 'react';\nimport Preview from './components/preview/';\nimport Form from './components/form/';\nimport BackgroundSetter from './components/backgroundSetter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"app-wrapper\">\n        <div className=\"input-conponents\">\n          <BackgroundSetter />\n          <Form />\n        </div>\n        <div className=\"view-components\">\n          <Preview />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'normalize.css';\nimport App from './App';\nimport { AppProvider } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}